# Copyright (c) 2006-2013 Regents of the University of Minnesota.
# For licensing terms, see the file LICENSE.

# Copy and paste to a ./ccp.py -i seesion:

from gwis.command_ import checkout
from gwis.command_ import commit
from gwis.command_ import geocode
from gwis.command_ import grac_get
#from gwis.command_ import grac_put
from gwis.command_ import item_draw_class_get
from gwis.command_ import item_findability_get
from gwis.command_ import item_findability_put
from gwis.command_ import item_history_get
from gwis.command_ import item_names_get
from gwis.command_ import item_read_event_put
from gwis.command_ import item_reminder_set
from gwis.command_ import kval_get
from gwis.command_ import landmark_exp_active_get
from gwis.command_ import landmark_exp_begin
from gwis.command_ import landmark_exp_fam_put
from gwis.command_ import landmark_exp_feedback_put
from gwis.command_ import landmark_exp_landmark_put
from gwis.command_ import landmark_exp_p2_begin
from gwis.command_ import landmark_exp_rt_done
from gwis.command_ import landmark_exp_val_put
from gwis.command_ import landmark_need_get
from gwis.command_ import landmark_prompt_log
from gwis.command_ import landmark_trial_get
from gwis.command_ import landmark_trial_put
from gwis.command_ import log
#from gwis.command_ import null
from gwis.command_ import revision_get
from gwis.command_ import revision_revert
from gwis.command_ import route_feedback_dragged
from gwis.command_ import route_feedback_unedited
from gwis.command_ import route_get
#from gwis.command_ import route_search
from gwis.command_ import routes_viewed_clear
from gwis.command_ import search
from gwis.command_ import stealth_create
from gwis.command_ import user_goodbye
from gwis.command_ import user_hello
from gwis.command_ import user_nowatchers
from gwis.command_ import user_preference_put
from gwis.command_ import user_unsubscribe

ttest = checkout.Op_Handler(req=None); str(ttest)
ttest = commit.Op_Handler(req=None); str(ttest)
ttest = geocode.Op_Handler(req=None); str(ttest)
ttest = grac_get.Op_Handler(req=None); str(ttest)
#ttest = grac_put.Op_Handler(req=None); str(ttest)
ttest = item_draw_class_get.Op_Handler(req=None); str(ttest)
ttest = item_findability_get.Op_Handler(req=None); str(ttest)
ttest = item_findability_put.Op_Handler(req=None); str(ttest)
ttest = item_history_get.Op_Handler(req=None); str(ttest)
ttest = item_names_get.Op_Handler(req=None); str(ttest)
ttest = item_read_event_put.Op_Handler(req=None); str(ttest)
ttest = item_reminder_set.Op_Handler(req=None); str(ttest)
ttest = kval_get.Op_Handler(req=None); str(ttest)
ttest = landmark_exp_active_get.Op_Handler(req=None); str(ttest)
ttest = landmark_exp_begin.Op_Handler(req=None); str(ttest)
ttest = landmark_exp_fam_put.Op_Handler(req=None); str(ttest)
ttest = landmark_exp_feedback_put.Op_Handler(req=None); str(ttest)
ttest = landmark_exp_landmark_put.Op_Handler(req=None); str(ttest)
ttest = landmark_exp_p2_begin.Op_Handler(req=None); str(ttest)
ttest = landmark_exp_rt_done.Op_Handler(req=None); str(ttest)
ttest = landmark_exp_val_put.Op_Handler(req=None); str(ttest)
ttest = landmark_need_get.Op_Handler(req=None); str(ttest)
ttest = landmark_prompt_log.Op_Handler(req=None); str(ttest)
ttest = landmark_trial_get.Op_Handler(req=None); str(ttest)
ttest = landmark_trial_put.Op_Handler(req=None); str(ttest)
ttest = log.Op_Handler(req=None); str(ttest)
#ttest = null.Op_Handler(req=None); str(ttest)
ttest = revision_get.Op_Handler(req=None); str(ttest)
ttest = revision_revert.Op_Handler(req=None); str(ttest)
ttest = route_feedback_dragged.Op_Handler(req=None); str(ttest)
ttest = route_feedback_unedited.Op_Handler(req=None); str(ttest)
ttest = route_get.Op_Handler(req=None); str(ttest)
#ttest = route_search.Op_Handler(req=None); str(ttest)
ttest = routes_viewed_clear.Op_Handler(req=None); str(ttest)
ttest = search.Op_Handler(req=None); str(ttest)
ttest = stealth_create.Op_Handler(req=None); str(ttest)
ttest = user_goodbye.Op_Handler(req=None); str(ttest)
ttest = user_hello.Op_Handler(req=None); str(ttest)
ttest = user_nowatchers.Op_Handler(req=None); str(ttest)
ttest = user_preference_put.Op_Handler(req=None); str(ttest)
ttest = user_unsubscribe.Op_Handler(req=None); str(ttest)

