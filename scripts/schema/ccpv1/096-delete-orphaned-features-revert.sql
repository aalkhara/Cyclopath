/* Copyright (c) 2006-2012 Regents of the University of Minnesota.
   For licensing terms, see the file LICENSE. */

/* This script restores features deleted from the database. */

BEGIN TRANSACTION;
SET CONSTRAINTS ALL DEFERRED;

SET search_path TO minnesota, public;

/* =================================================== */
/* DANGLING FEATURES / annot_bs ==> non-existent byway */
/* =================================================== */

/* To get the data below, run this:

   echo "COPY (                                                               \
      SELECT ab.*                                                             \
         FROM minnesota.annot_bs AS ab                                        \
         LEFT OUTER JOIN minnesota.byway_segment AS bs                        \
            ON ab.byway_id = bs.id                                            \
         JOIN minnesota.annotation AS an                                      \
            ON ab.annot_id = an.id                                            \
         WHERE bs.id IS NULL                                                  \
         GROUP BY ab.id, ab.version, ab.deleted, ab.annot_id, ab.byway_id,    \
                  ab.valid_starting_rid, ab.valid_before_rid                  \
         ORDER BY ab.byway_id                                                 \
   ) TO STDOUT WITH CSV"                                                      \
   | psql -U cycling cycling                                                  \
   > restore.deleted

*/

\qecho 
\qecho Repopulating annot_bs w/ 61 rows w/ phantom byway_ids
\qecho

/* The quick way is to COPY, but Psql only lets admins copy to/from files, so
   this will not work for most users:
   
   COPY annot_bs 
      FROM '093-delete-abandoned-orphans_annot_bs.deleted' WITH CSV;

   So we do a big INSERT instead. */

INSERT INTO annot_bs (id, version, deleted, annot_id, byway_id,
      valid_starting_rid, valid_before_rid) VALUES
   (1356292,1,TRUE,1355571,1356324,1560,2000000000),
   (1356442,1,TRUE,1355371,1356465,1665,2000000000),
   (1356461,1,TRUE,1355397,1356465,1665,2000000000),
   (1371432,1,TRUE,1358862,1371447,4686,2000000000),
   (1374679,1,TRUE,1367838,1374749,5077,2000000000),
   (1378900,1,TRUE,1378915,1378989,5755,2000000000),
   (1378923,1,TRUE,1378915,1378990,5755,2000000000),
   (1378924,1,TRUE,1378915,1378990,5755,2000000000),
   (1378957,1,TRUE,1378915,1378990,5755,2000000000),
   (1378983,1,TRUE,1378915,1378991,5755,2000000000),
   (1380622,1,TRUE,1376091,1380627,5980,2000000000),
   (1387910,1,TRUE,1366909,1387983,6126,2000000000),
   (1387911,1,TRUE,1366909,1387983,6126,2000000000),
   (1387930,1,TRUE,1366861,1387983,6126,2000000000),
   (1387934,1,TRUE,1366861,1387983,6126,2000000000),
   (1387948,1,TRUE,1366861,1387983,6126,2000000000),
   (1387955,1,TRUE,1366861,1387983,6126,2000000000),
   (1387964,1,TRUE,1366861,1387983,6126,2000000000),
   (1388020,1,TRUE,1366888,1388095,6127,2000000000),
   (1388030,1,TRUE,1366888,1388095,6127,2000000000),
   (1388035,1,TRUE,1366888,1388095,6127,2000000000),
   (1388036,1,TRUE,1366888,1388095,6127,2000000000),
   (1388037,1,TRUE,1366888,1388095,6127,2000000000),
   (1388048,1,TRUE,1366888,1388095,6127,2000000000),
   (1388054,1,TRUE,1366888,1388095,6127,2000000000),
   (1388055,1,TRUE,1366888,1388095,6127,2000000000),
   (1388064,1,TRUE,1366888,1388095,6127,2000000000),
   (1388066,1,TRUE,1366888,1388095,6127,2000000000),
   (1395410,1,TRUE,1364862,1395416,6279,2000000000),
   (1397806,1,TRUE,1380644,1397810,6631,2000000000),
   (1398225,1,TRUE,1381149,1398230,6686,2000000000),
   (1398853,1,TRUE,1358340,1398855,6781,2000000000),
   (1398903,1,TRUE,1379349,1398908,6789,2000000000),
   (1401319,1,TRUE,1363489,1401321,7058,2000000000),
   (1402886,1,TRUE,1375013,1402892,7201,2000000000),
   (1403518,1,TRUE,1401074,1403523,7286,2000000000),
   (1404668,1,TRUE,1354643,1404677,7434,2000000000),
   (1405207,1,TRUE,1375013,1405210,7483,2000000000),
   (1410868,1,TRUE,1410875,1410872,7712,2000000000),
   (1410867,1,TRUE,1410875,1410880,7712,2000000000),
   (1411636,1,TRUE,1374188,1411639,7763,2000000000),
   (1412588,1,TRUE,1355745,1412599,7824,2000000000),
   (1412589,1,TRUE,1355743,1412600,7824,2000000000),
   (1414012,1,TRUE,1375013,1414022,7928,2000000000),
   (1414019,1,TRUE,1375013,1414023,7928,2000000000),
   (1415876,1,TRUE,1360466,1415906,8040,2000000000),
   (1421117,1,TRUE,1374188,1421118,8335,2000000000),
   (1434213,1,TRUE,1433656,1434221,9069,2000000000),
   (1435704,1,TRUE,1360139,1435714,9199,2000000000),
   (1435709,1,TRUE,1360121,1435715,9199,2000000000),
   (1435713,1,TRUE,1360139,1435716,9199,2000000000),
   (1445222,1,TRUE,1445225,1445226,9978,2000000000),
   (1449507,1,TRUE,1373976,1449510,10200,2000000000),
   (1470598,1,TRUE,1381122,1470599,10653,2000000000),
   (1470606,1,TRUE,1381122,1470607,10654,2000000000),
   (1474591,1,TRUE,1431871,1474592,10921,2000000000),
   (1474599,1,TRUE,1431869,1474592,10921,2000000000),
   (1477529,1,TRUE,1477530,1477531,11147,2000000000),
   (1477695,1,TRUE,1476354,1477696,11156,2000000000),
   (1491165,1,TRUE,1491146,1491150,12235,2000000000);

/* ======================================================== */
/* DANGLING FEATURES / annot_bs ==> non-existent annotation */
/* ======================================================== */

/* To get the data below, run this:

   echo "COPY (                                                               \
      SELECT ab.*                                                             \
         FROM minnesota.annot_bs AS ab                                        \
         LEFT OUTER JOIN minnesota.annotation AS an                           \
            ON ab.annot_id = an.id                                            \
         WHERE an.id IS NULL                                                  \
         GROUP BY ab.id, ab.version, ab.deleted, ab.annot_id, ab.byway_id,    \
                  ab.valid_starting_rid, ab.valid_before_rid                  \
         ORDER BY ab.byway_id                                                 \
   ) TO STDOUT WITH CSV"                                                      \
   | psql -U cycling cycling                                                  \
   > restore.deleted

*/

\qecho 
\qecho Repopulating annot_bs w/ 187 rows w/ phantom annot_ids
\qecho

INSERT INTO annot_bs (id, version, deleted, annot_id, byway_id,
      valid_starting_rid, valid_before_rid) VALUES
   (1366163,1,TRUE,1366177,985004,3830,2000000000),
   (1361869,1,TRUE,1361884,985163,2726,2000000000),
   (1361831,1,TRUE,1361841,986045,2719,2000000000),
   (1361620,1,TRUE,1361621,986575,2639,2000000000),
   (1361826,1,TRUE,1361841,987848,2719,2000000000),
   (1361820,1,TRUE,1361841,987868,2719,2000000000),
   (1361878,1,TRUE,1361884,987978,2726,2000000000),
   (1369244,1,TRUE,1369271,987986,4326,2000000000),
   (1400190,1,TRUE,1400191,991270,6952,2000000000),
   (1361935,1,TRUE,1361948,991309,2757,2000000000),
   (1357441,1,TRUE,1357470,993211,1904,2000000000),
   (1361870,1,TRUE,1361884,993404,2726,2000000000),
   (1416198,1,TRUE,1416202,993429,8049,2000000000),
   (1416201,1,TRUE,1416202,993431,8049,2000000000),
   (1486441,1,TRUE,1486440,993506,11833,2000000000),
   (1400185,1,TRUE,1400191,993606,6952,2000000000),
   (1400189,1,TRUE,1400191,994519,6952,2000000000),
   (1486447,1,TRUE,1486440,994811,11833,2000000000),
   (1450503,1,TRUE,1450530,994835,10305,2000000000),
   (1357464,1,TRUE,1357470,995964,1904,2000000000),
   (1361940,1,TRUE,1361948,996104,2757,2000000000),
   (1361840,1,TRUE,1361841,996622,2719,2000000000),
   (1361823,1,TRUE,1361841,996657,2719,2000000000),
   (1361825,1,TRUE,1361841,996776,2719,2000000000),
   (1361828,1,TRUE,1361841,997980,2719,2000000000),
   (1361834,1,TRUE,1361841,998542,2719,2000000000),
   (1369268,1,TRUE,1369271,999032,4326,2000000000),
   (1369264,1,TRUE,1369271,999215,4326,2000000000),
   (1357465,1,TRUE,1357470,999228,1904,2000000000),
   (1450499,1,TRUE,1450530,999715,10305,2000000000),
   (1450511,1,TRUE,1450530,1000116,10305,2000000000),
   (1450526,1,TRUE,1450530,1000657,10305,2000000000),
   (1486450,1,TRUE,1486440,1001426,11833,2000000000),
   (1361866,1,TRUE,1361884,1003022,2726,2000000000),
   (1486439,1,TRUE,1486440,1005878,11833,2000000000),
   (1361824,1,TRUE,1361841,1006000,2719,2000000000),
   (1365934,1,TRUE,1365935,1006637,3762,2000000000),
   (1361930,1,TRUE,1361948,1006727,2757,2000000000),
   (1357446,1,TRUE,1357470,1007557,1904,2000000000),
   (1450519,1,TRUE,1450530,1010039,10305,2000000000),
   (1400184,1,TRUE,1400191,1010189,6952,2000000000),
   (1361874,1,TRUE,1361884,1010263,2726,2000000000),
   (1357437,1,TRUE,1357470,1010604,1904,2000000000),
   (1366176,1,TRUE,1366177,1014219,3830,2000000000),
   (1361821,1,TRUE,1361841,1014278,2719,2000000000),
   (1361883,1,TRUE,1361884,1014293,2726,2000000000),
   (1361832,1,TRUE,1361841,1014305,2719,2000000000),
   (1486456,1,TRUE,1486440,1014336,11833,2000000000),
   (1450504,1,TRUE,1450530,1015324,10305,2000000000),
   (1361865,1,TRUE,1361884,1015749,2726,2000000000),
   (1366169,1,TRUE,1366177,1017970,3830,2000000000),
   (1357466,1,TRUE,1357470,1019274,1904,2000000000),
   (1357468,1,TRUE,1357470,1019278,1904,2000000000),
   (1361881,1,TRUE,1361884,1019305,2726,2000000000),
   (1369266,1,TRUE,1369271,1019353,4326,2000000000),
   (1357457,1,TRUE,1357470,1019450,1904,2000000000),
   (1357453,1,TRUE,1357470,1019476,1904,2000000000),
   (1486459,1,TRUE,1486440,1020011,11833,2000000000),
   (1486457,1,TRUE,1486440,1021035,11833,2000000000),
   (1403040,1,TRUE,1403043,1021473,7218,2000000000),
   (1403038,1,TRUE,1403043,1021549,7218,2000000000),
   (1486460,1,TRUE,1486440,1021803,11833,2000000000),
   (1357448,1,TRUE,1357470,1024052,1904,2000000000),
   (1486448,1,TRUE,1486440,1024359,11833,2000000000),
   (1357458,1,TRUE,1357470,1024729,1904,2000000000),
   (1357456,1,TRUE,1357470,1024754,1904,2000000000),
   (1357461,1,TRUE,1357470,1024805,1904,2000000000),
   (1354327,1,FALSE,1354330,1024834,472,569),
   (1354327,2,TRUE,1354330,1024834,569,2000000000),
   (1357445,1,TRUE,1357470,1024976,1904,2000000000),
   (1357443,1,TRUE,1357470,1024989,1904,2000000000),
   (1357460,1,TRUE,1357470,1025061,1904,2000000000),
   (1357442,1,TRUE,1357470,1025070,1904,2000000000),
   (1361837,1,TRUE,1361841,1028380,2719,2000000000),
   (1357462,1,TRUE,1357470,1028444,1904,2000000000),
   (1357438,1,TRUE,1357470,1028543,1904,2000000000),
   (1357467,1,TRUE,1357470,1028556,1904,2000000000),
   (1369262,1,TRUE,1369271,1029062,4326,2000000000),
   (1357450,1,TRUE,1357470,1029137,1904,2000000000),
   (1357449,1,TRUE,1357470,1029139,1904,2000000000),
   (1357452,1,TRUE,1357470,1029162,1904,2000000000),
   (1358027,1,TRUE,1358040,1029213,2006,2000000000),
   (1369263,1,TRUE,1369271,1029349,4326,2000000000),
   (1369269,1,TRUE,1369270,1029349,4326,2000000000),
   (1361872,1,TRUE,1361884,1029416,2726,2000000000),
   (1369253,1,TRUE,1369271,1029477,4326,2000000000),
   (1369254,1,TRUE,1369270,1029477,4326,2000000000),
   (1369246,1,TRUE,1369270,1029491,4326,2000000000),
   (1369251,1,TRUE,1369271,1029491,4326,2000000000),
   (1361929,1,TRUE,1361948,1030583,2757,2000000000),
   (1361946,1,TRUE,1361948,1032737,2757,2000000000),
   (1358031,1,TRUE,1358040,1037083,2006,2000000000),
   (1369249,1,TRUE,1369270,1037190,4326,2000000000),
   (1369265,1,TRUE,1369271,1037190,4326,2000000000),
   (1357469,1,TRUE,1357470,1037513,1904,2000000000),
   (1486442,1,TRUE,1486440,1040377,11833,2000000000),
   (1486445,1,TRUE,1486440,1040402,11833,2000000000),
   (1361830,1,TRUE,1361841,1040520,2719,2000000000),
   (1357440,1,TRUE,1357470,1041649,1904,2000000000),
   (1357444,1,TRUE,1357470,1041653,1904,2000000000),
   (1357435,1,TRUE,1357470,1043510,1904,2000000000),
   (1357439,1,TRUE,1357470,1043740,1904,2000000000),
   (1354325,1,FALSE,1354330,1043896,472,569),
   (1354325,2,TRUE,1354330,1043896,569,2000000000),
   (1357451,1,TRUE,1357470,1043911,1904,2000000000),
   (1361875,1,TRUE,1361884,1044209,2726,2000000000),
   (1361876,1,TRUE,1361884,1044261,2726,2000000000),
   (1361877,1,TRUE,1361884,1044311,2726,2000000000),
   (1361880,1,TRUE,1361884,1044518,2726,2000000000),
   (1369257,1,TRUE,1369271,1044590,4326,2000000000),
   (1369259,1,TRUE,1369270,1044590,4326,2000000000),
   (1361882,1,TRUE,1361884,1044594,2726,2000000000),
   (1361868,1,TRUE,1361884,1044606,2726,2000000000),
   (1357463,1,TRUE,1357470,1044810,1904,2000000000),
   (1357454,1,TRUE,1357470,1044815,1904,2000000000),
   (1357436,1,TRUE,1357470,1044932,1904,2000000000),
   (1450505,1,TRUE,1450530,1048913,10305,2000000000),
   (1450515,1,TRUE,1450530,1049002,10305,2000000000),
   (1361873,1,TRUE,1361884,1049353,2726,2000000000),
   (1366157,1,TRUE,1366177,1049479,3830,2000000000),
   (1367513,1,TRUE,1367520,1052822,4015,2000000000),
   (1484272,1,TRUE,1484273,1053364,11645,2000000000),
   (1361879,1,TRUE,1361884,1053512,2726,2000000000),
   (1369241,1,TRUE,1369270,1053594,4326,2000000000),
   (1369248,1,TRUE,1369271,1053594,4326,2000000000),
   (1361939,1,TRUE,1361948,1054855,2757,2000000000),
   (1403039,1,TRUE,1403043,1055590,7218,2000000000),
   (1400188,1,TRUE,1400191,1057219,6952,2000000000),
   (1400187,1,TRUE,1400191,1059879,6952,2000000000),
   (1361932,1,TRUE,1361948,1059944,2757,2000000000),
   (1366158,1,TRUE,1366177,1061011,3830,2000000000),
   (1482812,1,TRUE,1482813,1064317,11518,2000000000),
   (1357455,1,TRUE,1357470,1067647,1904,2000000000),
   (1366164,1,TRUE,1366177,1069542,3830,2000000000),
   (1366166,1,TRUE,1366177,1070529,3830,2000000000),
   (1361938,1,TRUE,1361948,1070727,2757,2000000000),
   (1362114,1,TRUE,1362116,1072498,2796,2000000000),
   (1362109,1,TRUE,1362116,1072526,2796,2000000000),
   (1357447,1,TRUE,1357470,1072856,1904,2000000000),
   (1361934,1,TRUE,1361948,1076649,2757,2000000000),
   (1403036,1,TRUE,1403043,1077029,7218,2000000000),
   (1354328,1,FALSE,1354330,1077451,472,569),
   (1354328,2,TRUE,1354330,1077451,569,2000000000),
   (1369247,1,TRUE,1369271,1079055,4326,2000000000),
   (1369250,1,TRUE,1369270,1079055,4326,2000000000),
   (1354323,1,FALSE,1354330,1079231,472,569),
   (1354323,2,TRUE,1354330,1079231,569,2000000000),
   (1362112,1,TRUE,1362116,1079918,2796,2000000000),
   (1361943,1,TRUE,1361948,1084736,2757,2000000000),
   (1361836,1,TRUE,1361841,1091536,2719,2000000000),
   (1361835,1,TRUE,1361841,1091601,2719,2000000000),
   (1361945,1,TRUE,1361948,1092520,2757,2000000000),
   (1366160,1,TRUE,1366177,1092968,3830,2000000000),
   (1361833,1,TRUE,1361841,1093725,2719,2000000000),
   (1361822,1,TRUE,1361841,1094383,2719,2000000000),
   (1434366,1,TRUE,1434376,1096704,9078,2000000000),
   (1361838,1,TRUE,1361841,1098250,2719,2000000000),
   (1418580,1,TRUE,1418581,1098493,8210,2000000000),
   (1369256,1,TRUE,1369271,1098763,4326,2000000000),
   (1361829,1,TRUE,1361841,1100639,2719,2000000000),
   (1361942,1,TRUE,1361948,1101651,2757,2000000000),
   (1397457,1,TRUE,1397534,1105013,6576,2000000000),
   (1366165,1,TRUE,1366177,1106539,3830,2000000000),
   (1366172,1,TRUE,1366177,1106594,3830,2000000000),
   (1361827,1,TRUE,1361841,1106633,2719,2000000000),
   (1434373,1,TRUE,1434376,1107934,9078,2000000000),
   (1361839,1,TRUE,1361841,1109119,2719,2000000000),
   (1357691,1,TRUE,1357719,1112144,1929,2000000000),
   (1403364,1,TRUE,1403365,1127223,7262,2000000000),
   (1387858,1,TRUE,1387893,1131550,6125,2000000000),
   (1387865,1,TRUE,1387893,1131565,6125,2000000000),
   (1362362,1,TRUE,1362363,1133646,2851,2000000000),
   (1373675,1,TRUE,1373678,1135796,4944,2000000000),
   (1449656,1,TRUE,1449658,1135996,10218,2000000000),
   (1354392,1,FALSE,1354393,1137523,491,569),
   (1354392,2,TRUE,1354393,1137523,569,2000000000),
   (1396491,1,TRUE,1396493,1355016,6431,2000000000),
   (1366161,1,TRUE,1366177,1357525,3830,2000000000),
   (1359571,1,TRUE,1359572,1359568,2212,2000000000),
   (1369267,1,TRUE,1369271,1363535,4326,2000000000),
   (1482650,1,TRUE,1482651,1369101,11503,2000000000),
   (1377569,1,TRUE,1377585,1377579,5562,2000000000),
   (1492908,1,TRUE,1492909,1396119,12377,2000000000),
   (1399797,1,TRUE,1399798,1399782,6887,2000000000),
   (1482652,1,TRUE,1482651,1401501,11503,2000000000),
   (1428220,1,TRUE,1428228,1428209,8762,2000000000),
   (1483191,1,TRUE,1483192,1483193,11536,2000000000);

/* ============================================================ */
/* ORPHANED FEATURES / annotation ==> not linked from annot_bs  */
/* ============================================================ */

/* To get the data below, run this:

   echo "COPY (                                                               \
      SELECT an.id, an.version,                                               \
             CASE WHEN an.deleted IS TRUE THEN 'TRUE'                         \
                  ELSE 'FALSE' END AS deleted,                                \
             ''''||an.comments||'''',                                         \
             an.valid_starting_rid, an.valid_before_rid                       \
         FROM minnesota.annotation AS an                                      \
         LEFT OUTER JOIN minnesota.annot_bs AS ab                             \
            ON an.id = ab.annot_id                                            \
         WHERE ab.id IS NULL                                                  \
         ORDER BY an.id                                                       \
   ) TO STDOUT WITH CSV"                                                      \
   | psql -U cycling cycling                                                  \
   > restore.deleted

*/

\qecho 
\qecho Repopulating annotation w/ 42 orphaned rows
\qecho

INSERT INTO annotation (id, version, deleted, comments,
                        valid_starting_rid, valid_before_rid) VALUES
   (1354290,1,FALSE,'New Note',466,569),
   (1354290,2,TRUE,'New Note',569,2000000000),
   (1354411,1,FALSE,'New Note',499,569),
   (1354411,2,TRUE,'New Note',569,2000000000),
   (1354469,1,FALSE,'New Note',530,569),
   (1354469,2,TRUE,'New Note',569,2000000000),
   (1354637,1,FALSE,'New Note',559,569),
   (1354637,2,TRUE,'New Note',569,2000000000),
   (1354863,1,TRUE,'New Note',632,2000000000),
   (1354908,1,TRUE,'New Note',681,2000000000),
   (1354926,1,TRUE,'Traffic is light to moderate outside of rush hours.  At 6:00 PM on a Monday this route is quite tolerable.',681,2000000000),
   (1355386,1,TRUE,'New Note',1220,2000000000),
   (1355470,1,TRUE,'Thomas is a good road for biking. There is parking on both sides, aside from the stretch between ',1251,2000000000),
   (1355521,1,TRUE,'New Note',1277,2000000000),
   (1355978,1,TRUE,'Very dangerous road crossing!!  Don''t get "offed" by a cement truck!',1376,2000000000),
   (1355979,1,TRUE,'New Note',1379,2000000000),
   (1355980,1,TRUE,'Strongly consider the Bruce Vento bikepath underpass, much safer than Kellog Blvd.',1379,2000000000),
   (1355990,1,TRUE,'Heavy traffic, great architecture!',1381,2000000000),
   (1355994,1,TRUE,'Heavy traffic, great architecture!',1381,2000000000),
   (1356014,1,TRUE,'Mind the pot-holes.',1402,2000000000),
   (1356076,1,TRUE,'New Note',1461,2000000000),
   (1356077,1,TRUE,'New Note',1461,2000000000),
   (1356085,1,TRUE,'New Note',1464,2000000000),
   (1356248,1,TRUE,'There are many rough areas on this road.',1546,2000000000),
   (1356287,1,TRUE,'',1557,2000000000),
   (1356289,1,TRUE,'',1558,2000000000),
   (1356291,1,TRUE,'New Note',1558,2000000000),
   (1356675,1,TRUE,'Shoulder disappears here, high traffic in the morning.',1725,2000000000),
   (1357272,1,TRUE,'Due to the freeway nature of the road, I prefer to ride on the sidewalk and then slow down/walk my bike when passing pedestrians.  Very few pedestrians use the sidewalk.',1873,2000000000),
   (1357459,1,TRUE,'Good route from South MPLS to Edina.',1904,2000000000),
   (1357542,1,TRUE,'There''s a bike trail on the north side of the freeway, from Hudson Trail N to Manning Avenue. Much nicer than this section of the South Frontage Road',1909,2000000000),
   (1358035,1,TRUE,'New Note',2006,2000000000),
   (1359731,1,TRUE,'There is a combined bike/pedestrian trail on the north side of Phalen Blvd.',2270,2000000000),
   (1359986,1,TRUE,'New Note',2381,2000000000),
   (1360044,1,TRUE,'New Note',2386,2000000000),
   (1360628,1,TRUE,'4th street seems the calmest way to get through downtown',2496,2000000000),
   (1361302,1,TRUE,'New Note',2559,2000000000),
   (1361619,1,TRUE,'New Note',2639,2000000000),
   (1362521,1,TRUE,'New Note',2928,2000000000),
   (1362529,1,TRUE,'New Note',2928,2000000000),
   (1362614,1,TRUE,'New Note',2950,2000000000),
   (1362790,1,TRUE,'',3007,2000000000);

/* ================================================= */
/* DANGLING FEATURES / tag_bs ==> non-existent byway */
/* ================================================= */

/* To get the data below, run this:

   echo "COPY (                                                               \
      SELECT tb.*                                                             \
         FROM minnesota.tag_bs AS tb                                          \
         LEFT OUTER JOIN minnesota.byway_segment AS bs                        \
            ON tb.byway_id = bs.id                                            \
         JOIN minnesota.tag AS t                                              \
            ON tb.tag_id = t.id                                               \
         WHERE bs.id IS NULL                                                  \
         GROUP BY tb.id, tb.version, tb.deleted, tb.tag_id, tb.byway_id,      \
               tb.valid_starting_rid, tb.valid_before_rid                     \
         ORDER BY tb.byway_id                                                 \
   ) TO STDOUT WITH CSV"                                                      \
   | psql -U cycling cycling                                                  \
   > restore.deleted

*/

\qecho 
\qecho Repopulating tag_bs w/ 22 rows w/ phantom byway_ids
\qecho

/* The quick way is to COPY, but Psql only lets admins copy to/from files, so
   this will not work for most users:
   
   COPY annot_bs 
      FROM '095-delete-abandoned-orphans-tag_bs.deleted' WITH CSV;

   So we do a big INSERT instead. */

INSERT INTO tag_bs (id, version, deleted, tag_id, byway_id,
      valid_starting_rid, valid_before_rid) VALUES
   (1410877,1,FALSE,1408486,1410872,7712,9418),
   (1410877,2,TRUE,1408486,1410872,9418,2000000000),
   (1410878,1,FALSE,1408486,1410880,7712,9418),
   (1410878,2,TRUE,1408486,1410880,9418,2000000000),
   (1449508,1,TRUE,1408486,1449510,10200,2000000000),
   (1470700,1,TRUE,1409158,1470701,10670,2000000000),
   (1470816,1,TRUE,1409158,1470817,10682,2000000000),
   (1470836,1,TRUE,1409158,1470817,10682,2000000000),
   (1471326,1,TRUE,1409158,1471327,10735,2000000000),
   (1471368,1,TRUE,1409158,1471369,10737,2000000000),
   (1472787,1,TRUE,1409158,1472788,10803,2000000000),
   (1472844,1,TRUE,1409158,1472845,10804,2000000000),
   (1473455,1,TRUE,1409158,1473456,10853,2000000000),
   (1473459,1,TRUE,1409158,1473460,10853,2000000000),
   (1473546,1,TRUE,1409158,1473547,10857,2000000000),
   (1474598,1,TRUE,1409158,1474592,10921,2000000000),
   (1477255,1,TRUE,1408486,1477256,11110,2000000000),
   (1480151,1,TRUE,1409158,1480152,11336,2000000000),
   (1481810,1,TRUE,1412367,1481811,11436,2000000000),
   (1491149,1,TRUE,1408486,1491150,12235,2000000000),
   (1491159,1,TRUE,1409778,1491150,12235,2000000000),
   (1496211,1,TRUE,1409158,1496212,12561,2000000000);

/* =============================================== */
/* DANGLING FEATURES / tag_bs ==> non-existent tag */
/* =============================================== */

/* To get the data below, run this:

   echo "COPY (                                                               \
      SELECT tb.*                                                             \
         FROM minnesota.tag_bs AS tb                                          \
         LEFT OUTER JOIN minnesota.tag AS tag                                 \
            ON tb.tag_id = tag.id                                             \
         WHERE tag.id IS NULL                                                 \
         GROUP BY tb.id, tb.version, tb.deleted, tb.tag_id, tb.byway_id,      \
                  tb.valid_starting_rid, tb.valid_before_rid                  \
         ORDER BY tb.byway_id                                                 \
   ) TO STDOUT WITH CSV"                                                      \
   | psql -U cycling cycling                                                  \
   > restore.deleted

*/

\qecho 
\qecho Repopulating tag_bs w/ 4 rows w/ phantom tag_ids
\qecho

INSERT INTO tag_bs (id, version, deleted, tag_id, byway_id,
      valid_starting_rid, valid_before_rid) VALUES
   (1428859,1,FALSE,1428861,1032906,8812,9418),
   (1428859,2,TRUE,1428861,1032906,9418,2000000000),
   (1428858,1,FALSE,1428860,1098732,8812,9418),
   (1428858,2,TRUE,1428860,1098732,9418,2000000000);

/* ==================================================== */
/* DANGLING FEATURES / tag_point ==> non-existent point */
/* ==================================================== */

/* To get the data below, run this:

   echo "COPY (                                                               \
      SELECT tp.*                                                             \
         FROM minnesota.tag_point AS tp                                       \
         LEFT OUTER JOIN minnesota.point AS pt                                \
            ON tp.point_id = pt.id                                            \
         JOIN minnesota.tag AS t                                              \
            ON tp.tag_id = t.id                                               \
         WHERE pt.id IS NULL                                                  \
         GROUP BY tp.id, tp.version, tp.deleted, tp.tag_id, tp.point_id,      \
               tp.valid_starting_rid, tp.valid_before_rid                     \
         ORDER BY tp.point_id                                                 \
   ) TO STDOUT WITH CSV"                                                      \
   | psql -U cycling cycling                                                  \
   > restore.deleted

*/

\qecho 
\qecho Repopulating tag_point w/ 2 rows w/ orphaned point_ids
\qecho

/* The quick way is to COPY, but Psql only lets admins copy to/from files, so
   this will not work for most users:
   
   COPY annot_bs 
      FROM '095-delete-abandoned-orphans-tag_point.deleted' WITH CSV;

   So we do a big INSERT instead. */

INSERT INTO tag_point (id, version, deleted, tag_id, point_id,
      valid_starting_rid, valid_before_rid) VALUES
   (1487135,1,TRUE,1413454,0,11889,2000000000),
   (1435239,1,FALSE,1425157,1435245,9167,9418),
   (1435239,2,TRUE,1425157,1435245,9418,2000000000);

/* ================================================== */
/* DANGLING FEATURES / tag_point ==> non-existent tag */
/* ================================================== */

/* To get the data below, run this:

   echo "COPY (                                                               \
      SELECT tp.*                                                             \
         FROM minnesota.tag_point AS tp                                       \
         LEFT OUTER JOIN minnesota.tag AS tag                                 \
            ON tp.tag_id = tag.id                                             \
         WHERE tag.id IS NULL                                                 \
         GROUP BY tp.id, tp.version, tp.deleted, tp.tag_id, tp.point_id,      \
                  tp.valid_starting_rid, tp.valid_before_rid                  \
         ORDER BY tp.point_id                                                 \
   ) TO STDOUT WITH CSV"                                                      \
   | psql -U cycling cycling                                                  \
   > restore.deleted

*/

\qecho 
\qecho Repopulating tag_point w/ 2 rows w/ phantom tag_ids
\qecho

INSERT INTO tag_point (id, version, deleted, tag_id, point_id,
      valid_starting_rid, valid_before_rid) VALUES
   (1416932,1,FALSE,1416934,1403214,8090,9418),
   (1416932,2,TRUE,1416934,1403214,9418,2000000000);

/* ====================================================== */
/* DANGLING FEATURES / tag_region ==> non-existent region */
/* ====================================================== */

/* Nothing to do. */

/* =================================================== */
/* DANGLING FEATURES / tag_region ==> non-existent tag */
/* =================================================== */

/* Nothing to do. */

/* ==== */
/* DONE */
/* ==== */

\qecho 
\qecho Restored the database to its former glory!!
\qecho

COMMIT;

